<?php
// $Id: sensormodule.module, v 1.0 2020/09/06 $

/**
 * @file sensormodule.module
 * Final Version.
 */

//==============================================================
//  DRUPAL FUNCTIONS
/**
 * Implementation of hook_menu().
 */
function sensormodule_menu() {
  $items = array();

  //MAIN MENU
  $items['sensormodule'] = array(
    'title' => 'Sensormodule',
    'page callback' => 'sensormodule_page',
    'access arguments' => array('access sensormodule content'),
  );

  //====TESTING====
  $items['sensormodule/testing'] = array(
    'title' => 'Testing',
    'page callback' => 'sensormodule_testingPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensormodule_tests.inc',
    'weight' => '2',
  );

  //====SEARCH====
  //SENSOR SEARCH
  $items['sensormodule/search'] = array(
    'title' => 'Search',
    'page callback' => 'sensormodule_sensorSearchPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensor.inc',
    'weight' => 0,
  );

  $items['sensormodule/search/sensor/details'] = array(
    'page callback' => 'sensormodule_sensorDetailsPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );

  //BRAND SEARCH
  $items['sensormodule/search/brand'] = array(
    'title' => 'Search Brand',
    'page callback' => 'sensormodule_searchBrandPage',
    'access arguments' =>  array('access sensormodule content'),
    'file' => 'brand.inc',
  );

  //GAS SEARCH
  $items['sensormodule/search/gas'] = array(
    'title' => 'Search Gas',
    'page callback' => 'sensormodule_searchGasPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'gas.inc',
  );

  //====EDIT====
  $items['sensormodule/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'sensormodule_editMenuPage',
    'access arguments' => array('edit sensormodule content'),
    'weight' => 1,
  );
  //EDIT GAS
  $items['sensormodule/edit/gas'] = array(
    'title' => 'Edit Gas',
    'page callback' => 'sensormodule_editGasPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'gas.inc',
  );
  $items['sensormodule/edit/gas/add'] = array(
    'page callback' => 'sensormodule_addGasPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'gas.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/gas/modify'] = array(
    'page callback' => 'sensormodule_modifyGasPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'gas.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/gas/remove'] = array(
    'page callback' => 'sensormodule_removeGasPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'gas.inc',
    'type' => 'MENU_CALLBACK'
  );

  //EDIT BRAND
  $items['sensormodule/edit/brand'] = array(
    'title' => 'Edit Brand',
    'page callback' => 'sensormodule_editBrandPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'brand.inc',
  );
  $items['sensormodule/edit/brand/add'] = array(
    'page callback' => 'sensormodule_addBrandPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'brand.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/brand/modify'] = array(
    'page callback' => 'sensormodule_modifyBrandPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'brand.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/brand/remove'] = array(
    'page callback' => 'sensormodule_removeBrandPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'brand.inc',
    'type' => 'MENU_CALLBACK'
  );

  //EDIT SENSOR
  $items['sensormodule/edit/sensor'] = array(
    'title' => 'Edit Sensor',
    'page callback' => 'sensormodule_editSensorPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'sensor.inc',
    'weight' => '-1',
  );
  $items['sensormodule/edit/sensor/add'] = array(
    'page callback' => 'sensormodule_addSensorPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'sensor.inc',
    'weight' => '-2',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/sensor/modify'] = array(
    'page callback' => 'sensormodule_modifySensorPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/sensor/remove'] = array(
    'page callback' => 'sensormodule_removeSensorPage',
    'access arguments' => array('edit sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/detects/modify'] = array(
    'page callback' => 'sensormodule_modifyDetectPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/detects/remove'] = array(
    'page callback' => 'sensormodule_removeDetectPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );
  $items['sensormodule/edit/detects/add'] = array(
    'page callback' => 'sensormodule_addDetectPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'sensor.inc',
    'type' => 'MENU_CALLBACK'
  );

  //PDF SCRAPER
  $items['sensormodule/edit/sensor/upload'] = array (
    'title' => "Datasheet Upload",
    'page callback' => 'sensormodule_uploadDatasheetPage',
    'access arguments' => array('access sensormodule content'),
    'file' => 'pdfscraper.inc',
    'weight' => '-1'
  );

  return $items;
}

//==================================================================
// NAME: sensorModule_testingPage
// PURPOSE: Creates Testing page from run_tests
// DATE: 19/10/2020
//==================================================================
function sensormodule_testingPage() {
  $page_content = run_tests();
  return $page_content;
}

//==================================================================
// NAME: sensorModule_init
// PURPOSE: Adds the CSS file for every page
// DATE: 19/10/2020
//==================================================================
function sensormodule_init() {

  //UNCOMMENT THIS REBUILD IF MENU STARTS DOING WEIRD STUFF DURING DEV
  //menu_rebuild();

  //Loads the sensormodule CSS file for every page
  drupal_add_css(drupal_get_path('module', 'sensormodule').'/sensormodule.css');
}

//==================================================================
// NAME: sensorModule_perm
// PURPOSE: Creates Permissions for Module
// DATE: 19/10/2020
//==================================================================
function sensorModule_perm()
{
  return array('edit sensormodule content','access sensormodule content');
}

//HOOK_THEME
//**************************************************************
//  NAME: sensormodule_theme
//  USE: Hook theme for tables to render each row as an individual form
//  DATE: 16/09/2020
//**************************************************************
function sensormodule_theme() {
      
  $theme['editSensorSearchResultsTable_theme'] = array
  (
    '#render element' => 'form',
  );

  $theme['sensorSearchResultsTable_theme'] = array
  (
    '#render element' => 'form', 
  );

  $theme['gasSearchResultsTable_theme'] = array
  (
    '#render element' => 'form',
  );

  $theme['brandSearchResultsTable_theme'] = array
  (
    '#render element' => 'form',
  );

  $theme['sensorDetectsListTable_theme'] = array(
    '#render element' => 'form',
  );

  $theme['searchDetailsDetectsTableForm_theme'] = array(
    '#render element' => 'form',
  );
    
  $theme['editBrandSearchResultsTable_theme'] = array(
    '#render element' => 'form',
  );

  $theme['editGasSearchResultsTable_theme'] = array(
    '#render element' => 'form',
  );
  return $theme;
}
// END DRUPAL FUNCTIONS
//==============================================================


//==============================================================
//  MAIN MENU
function sensormodule_page() {
  $page_content = '<hr class="sensormodule-hr">
                    <h3 class="sensormodule-title">Gastech Sensor Database</h3><br><br>';
  $page_content .= drupal_get_form('sensormodule_mainMenuForm');
  return $page_content;
}

//**************************************************************
//  NAME: sensormodule_mainMenuForm
//  USE: Produces HTML for the Main Menu buttons
//  DATE: 09/09/2020
//**************************************************************
function sensormodule_mainMenuForm(&$form_state) { 
  $form['mainMenu'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Select Search'),
    '#attributes' => array('id' => 'main-menu', 'class' => 'sensor-search-fieldset'), 
  ); 


  $form['mainMenu']['sensor'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/sensor_idle.png',
    '#name' => 'sensor',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );

  $form['mainMenu']['brand'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/brand_idle.png',
    '#name' => 'brand',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );

  $form['mainMenu']['gas'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/gas_idle.png',
    '#name' => 'gas',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );


  return $form;
}

//REDIRECT FUNCTION FOR MAIN MENU SELECTIONS
function sensormodule_mainMenuForm_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#name']) {
    case "sensor":
      drupal_goto("sensormodule/search/sensor");
      break;
    case "brand":
      drupal_goto("sensormodule/search/brand");
      break;
    case "gas":
      drupal_goto("sensormodule/search/gas");
      break;
  }
}

// END MAIN MENU
//==============================================================


//==============================================================
// EDIT MENU
//**************************************************************
//  NAME: sensormodule_editMenuPage
//  USE: Produces Edit page
//  DATE: 09/09/2020
//**************************************************************
function sensormodule_editMenuPage() {
  $page_content = '<hr class="sensormodule-hr">
                    <h3 class="sensormodule-title">Sensormodule Admin</h3><br><br>';
  $page_content .= drupal_get_form('sensormodule_editMenuForm');
  return $page_content;
}
//**************************************************************
//  NAME: sensormodule_editMenuForm
//  USE: Produces Edit menu form
//  DATE: 09/09/2020
//**************************************************************
function sensormodule_editMenuForm(&$form_state) {
  $form['editMenu'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Select Edit'),
    '#attributes' => array('id' => 'main-menu', 'class' => 'sensor-search-fieldset'), 
  ); 

  $form['editMenu']['sensor'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/sensor_idle.png',
    '#name' => 'sensor',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );

  $form['editMenu']['brand'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/brand_idle.png',
    '#name' => 'brand',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );

  $form['editMenu']['gas'] = array(
    '#type' => 'image_button',
    '#button_type' => 'submit',
    '#src' => drupal_get_path('module', 'sensormodule').'/img/gas_idle.png',
    '#name' => 'gas',
    '#attributes' => array('class' => 'sensor-icon-btn')
  );

  return $form;
}
//**************************************************************
//  NAME: sensormodule_editMenuForm_submit
//  USE: Sends the user to appropriate edit page
//  DATE: 09/09/2020
//**************************************************************
function sensormodule_editMenuForm_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#name']) {
    case "sensor":
      drupal_goto("sensormodule/edit/sensor");
      break;
    case "brand":
      drupal_goto("sensormodule/edit/brand");
      break;
    case "gas":
      drupal_goto("sensormodule/edit/gas");
      break;
  }
}

// END EDIT MENU
//==============================================================

//==============================================================
//                         SENSOR PAGES
//================
// [Search Sensor]
//================
//**************************************************************
//  NAME: sensormodule_sensorSearchPage
//  USE:  Produces HTML for the Search Sensor Page including form.
//  DATE: 07/09/2020
//**************************************************************
function sensormodule_sensorSearchPage() {
  $page_content = "";
  $searchTerm = "";
  $filter = "partnum";

  $page_content .= '<hr style="clear:both;" class="sensormodule-hr">';
  $page_content .= drupal_get_form('sensormodule_sensorSearchBar');
  // If search term and filter specified in URL and not empty then get it
  if(isset($_GET['searchTerm']) && !empty($_GET['searchTerm']) && isset($_GET['filter']) && !empty($_GET['filter'])) {
    $searchTerm = $_GET['searchTerm'];
    $filter = $_GET['filter'];


    $searchTermSum = '<span class="search-term">\''.$searchTerm.'\'</span></h2>';
                    
    // Get full filter string for search result display
    switch($filter) {
      case "partnum":
        $fullFilter = "Part Number";
        break;
      case "alias":
        $fullFilter = "Alias";
        break;
      case "gas":
        $fullFilter = "All Sensors Which Detect";
        break;
      case "brand":
        $fullFilter = "Brand";
        break;
      case "brand-strict":
        $fullFilter = "All Sensors From";
        break;
      case "range":
        $fullFilter = "Reading Range";
        $searchTermSum = '<span class="search-term">Min &le; '.$searchTerm.' &le; Max</span></h2>';
        break;
      case "bias":
        $fullFilter = "Bias";
        $searchTermSum = '<span class="search-term">'.$searchTerm.'</span></h2>';
        break;
    }

    $searchSummary = '<div style="text-align: center;">
                      <h2><span class="search-tag">Filter:</span><span class="search-term">'.$fullFilter.'</span></h2><br>
                      <h2><span class="search-tag">Search:</span>'.$searchTermSum.'</div>';

    // Found Sensors Heading
    $page_content .= $searchSummary;
    
  }
  else {
    // All Sensors Heading
    $page_content .= '<h2 class="search-term">All Sensors</h2>';
  }

  $page_content .= '<hr style="clear:both;" class="sensormodule-hr">';


  $page_content .= drupal_get_form('sensormodule_sensorSearchResultsTable', $searchTerm, $filter);

  return $page_content;
}

//**************************************************************
//  NAME: sensormodule_sensorDetailsPage
//  USE:  Loads the form containing full sensor details
//  DATE: 30/10/2020
//**************************************************************
function sensormodule_sensorDetailsPage() {
  
  // If sensorID specified in URL and not empty then get info
  if(isset($_GET['sensorID']) && !empty($_GET['sensorID'])) {
    $sensorID = $_GET['sensorID'];
    $page_content = createSensorDetailsTable($sensorID);
    $backBtn = makeBackBtn('sensor-info-btns');
    drupal_add_js($backBtn, 'inline', 'footer');
  }
  else {
    drupal_set_message("Bad request, no Sensor ID given.", "error");
    drupal_goto('sensormodule/search/sensor');
  }

  return $page_content;
}

//==================
// [Edit Sensor]
//==================
//*************************************************************
//  NAME: sensormodule_addSensorPage
//  USE: Loads the add sensor page content with the add sensor form
//  DATE: 27/09/2020
//*************************************************************
function sensormodule_addSensorPage() {
  $backBtn = makeBackBtn('back-btn');
  drupal_add_js($backBtn, 'inline', 'footer');

  $page_content = "<div id='back-btn'></div>";
  $page_content .= drupal_get_form('sensormodule_addSensorForm');
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_addDetectPage
//  USE: Directs users to the page to add a detect entry for a sensor
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_addDetectPage() {

  // If sensorID specified in URL and not empty then get it
  if(isset($_GET['sensorID']) && !empty($_GET['sensorID'])) {
    $sensorID = $_GET['sensorID'];
    $page_content = drupal_get_form('sensormodule_addDetectForm', $sensorID);
  }
  else {
    drupal_set_message("Bad request, no Sensor ID given.", "error");
    drupal_goto('sensormodule/edit/sensor');
  }
  return $page_content;
}

//**************************************************************
//  NAME: sensormodule_editSensorPage
//  USE: Produces HTML for the Edit Sensors webpage
//  DATE: 16/09/2020
//**************************************************************
function sensormodule_editSensorPage() {

  $searchTerm = "";
  $page_content = "";
  $page_content .= '<hr class="sensormodule-hr">';

  // If search param specified in URL and not empty then get it
  if(isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = $_GET['search'];
    // Found Sensors Heading
    $page_content .= '<div style="text-align: center; padding: 20px 0px;">
                      <h2><span class="search-tag">Search:</span><span class="search-term">\''.$searchTerm.'\'</span></div>';
  }


  // Search bar form
  $page_content .= drupal_get_form('sensormodule_editSensorSearchBar');

  $page_content .= '<h2 class="sensormodule-title" style="text-align: center">Add Sensor</h2>';
  $page_content .= "<div id='add-sensor-btns' style='text-align: center;'></div>";


  // Add Sensor Buttons
  $addSensBtn = makeGotoBtn(url("sensormodule/edit/sensor/add"), 'add-sensor-btns', "New Sensor");
  $uploadBtn = makeGotoBtn(url("sensormodule/edit/sensor/upload"), 'add-sensor-btns', "Upload Datasheet");
  drupal_add_js($addSensBtn, 'inline', 'footer');
  drupal_add_js($uploadBtn, 'inline', 'footer');



  $page_content .= '<hr class="sensormodule-hr">';
  // Sensor table
  $page_content .= drupal_get_form('sensormodule_editSensorSearchResultsTable', $searchTerm);

  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_modifyDetectPage
//  USE: Sends user to the edit detect page containing all Detect fields
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_modifyDetectPage() {

  if((isset($_GET['sensorID']) && !empty($_GET['sensorID'])) && isset($_GET['gasID']) && !empty($_GET['gasID'])) {
    $sensorID = $_GET['sensorID'];
    $gasID = $_GET['gasID'];
    $backBtn = makeBackBtn('back-btn');
    $page_content = '<div id="back-btn"></div>
                      <hr class="sensormodule-hr">
                      <h1 class="sensormodule-title">Edit Detection Info</h1>
                      <hr class="sensormodule-hr">';
    $page_content .= drupal_get_form('sensormodule_modifyDetectForm', $sensorID, $gasID);
    drupal_add_js($backBtn, 'inline', 'footer');
  }
  else {
    drupal_set_message("Bad request, no SensorID or GasID given.", "error");
    drupal_goto("sensormodule/edit/sensor");
  }
  
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_removeDetectPage
//  USE: Sends user to the remove detect page 
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_removeDetectPage() {

  if((isset($_GET['sensorID']) && !empty($_GET['sensorID'])) && isset($_GET['gasID']) && !empty($_GET['gasID'])) {
    $sensorID = $_GET['sensorID'];
    $gasID = $_GET['gasID'];
    $sensorName = getSensorInfo($sensorID)->PartNumber;
    $gasName = getGasName($gasID);
    $page_content = '<h1 class="sensormodule-remove-title">WARNING: Are you sure you want to remove this detection entry for</h1>
    <h1 class="sensormodule-remove-title">('.$gasName.'/'.$sensorName.')?</h1><br>';
    $page_content .= drupal_get_form('sensormodule_removeDetectConfirmation', $sensorID, $gasID);
  }
  else {
    drupal_set_message("Bad request, no SensorID or GasID given.", "error");
    drupal_goto("sensormodule/edit/sensor");
  }

  return $page_content;
}

//**************************************************************
//  NAME: sensormodule_modifySensorPage
//  USE: Loads the that contains the full sensor details for editing
//  DATE: 27/09/2020
//**************************************************************
function sensormodule_modifySensorPage() {

  if(isset($_GET['sensorID']) && !empty($_GET['sensorID']))  {
    $sensorID = $_GET['sensorID'];
    $editPage = url("sensormodule/edit/sensor");
    $backBtn = makeGotoBtn($editPage, 'back-btn', 'Back');
    $page_content = '<div id="back-btn"></div>
                      <hr class="sensormodule-hr">
                      <h1 class="sensormodule-title">Edit Detection Info</h1>
                      <hr class="sensormodule-hr">';
    $page_content .= drupal_get_form('sensormodule_sensorDetectsListTable', $sensorID);
    $page_content .= '<h1 class="sensormodule-title">Edit Sensor Info</h1>
                      <hr class="sensormodule-hr">';
    $page_content .= drupal_get_form('sensormodule_modifySensorForm', $sensorID);
    drupal_add_js($backBtn, 'inline', 'footer');
  }
  else {
    drupal_set_message("Bad request, no SensorID given.", "error");
    drupal_goto("sensormodule/edit/sensor");
  }

  return $page_content;
}

//**************************************************************
// NAME: sensormodule_removeSensorPage
// USE: Output the page content for the remove sensor page
// DATE: 27/9/2020
//**************************************************************
function sensormodule_removeSensorPage() {

  if(isset($_GET['sensorID']) && !empty($_GET['sensorID']))  {
    $sensorID = $_GET['sensorID'];
    $page_content = '<h1 class="sensormodule-remove-title">WARNING: Are you sure you want to remove this sensor?</h1><br>';
    $page_content .= getRemoveSensorInfoTable($sensorID);
    $page_content .= "<br>";
    $page_content .= drupal_get_form('sensormodule_removeSensorConfirmation', $sensorID);
  }
  else {
    drupal_set_message("Bad request, no SensorID given.", "error");
    drupal_goto("sensormodule/edit/sensor");
  }

  return $page_content;
}

//**************************************************************
// NAME: sensormodule_uploadDatasheetPage
// USE: Loads the page content for the upload datasheet page
//       for pdf scraper
// DATE: 27/9/2020
//**************************************************************
function sensormodule_uploadDatasheetPage() {
  module_load_include('inc', 'sensormodule', 'sensor');
  $page_content = '<hr class="sensormodule-hr">';
  $page_content .= '<h2 class="sensormodule-title">Scrape Datasheet PDF</h2>';
  $page_content .= '<hr class="sensormodule-hr"><div style="text-align: center;">';
  $page_content .= drupal_get_form('sensormodule_uploadForm');
  $page_content .= '</div>';
  return $page_content;
}
//                       END SENSOR PAGES
//==============================================================


//==============================================================
//                           GAS PAGES
//================
// [Search Gas]
//================
//**************************************************************
//  NAME: sensormodule_searchGasPage
//  USE:  Produces HTML for the Search Gas Page including form.
//  DATE: 07/09/2020
//**************************************************************
function sensormodule_searchGasPage() {
  $searchTerm = "";
  $page_content = '<hr class="sensormodule-hr">';
  $page_content .= drupal_get_form('sensormodule_gasSearchBar');
  
  // Get search term if it exists
  if(isset($_GET['search']) && !empty($_GET['search']))  {
    $searchTerm = $_GET['search'];
    // Found Gas Heading
    $page_content .= '<div style="text-align: center;">
                      <h2><span class="search-tag">Search:</span><span class="search-term">\''.$searchTerm.'\'</span></div>';
  }
  else {
    // All Gas Heading
    $page_content .= '<h2 class="search-term">Gasses</h2>';
  } 
  $page_content .= '<hr class="sensormodule-hr">';
  $page_content .= drupal_get_form('sensormodule_gasSearchResultsTable',$searchTerm);

  return $page_content; 
}

//================
// [Edit Gas]
//================
//***************************************************************
//  NAME: sensormodule_addGasPage
//  USE: Sends user to the add gas page
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_addGasPage() {
  $page_content = drupal_get_form('sensormodule_addGasForm');
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_modifyGasPage
//  USE: Sends user to the modify gas page
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_modifyGasPage(){

  // Get search term if it exists
  if(isset($_GET['gasID']) && !empty($_GET['gasID']))  {
    $gasID = $_GET['gasID'];
    $name = getGasName($gasID);
    
    $page_content = '<h2 class="sensormodule-title">Edit '.$name.'</h2>';
    $page_content .= '<hr class="sensormodule-hr">';
    $page_content .= drupal_get_form("sensormodule_modifyGasForm", $gasID);
  }
  else {
    drupal_set_message("Bad request, no GasID given.", "error");
    drupal_goto('sensormodule/edit/gas');
  }


  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_editGasPage
//  USE: Sends user to page containing gas list, as well as add, edit and delete functionality
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_editGasPage() {

  $searchTerm = "";
  $page_content = "";  
  $page_content .= '<hr class="sensormodule-hr">';



  // Get search term if it exists
  if(isset($_GET['search']) && !empty($_GET['search']))  {
    $searchTerm = $_GET['search'];
    // Found Gas Heading
    $page_content .= '<div style="text-align: center; padding: 20px 0px;">
                      <h2><span class="search-tag">Search:</span><span class="search-term">\''.$searchTerm.'\'</span></div>';
  }
  $page_content .= drupal_get_form("sensormodule_editGasSearchBar");

  $page_content .= '<h2 class="sensormodule-title" style="text-align: center">Add Gas</h2>';
  $page_content .= "<div id='add-gas-btns' style='text-align: center;'></div>";
  $page_content .= '<hr class="sensormodule-hr">';

  // Add gas btns
  $addGasBtn = makeGotoBtn(url("sensormodule/edit/gas/add"), 'add-gas-btns', "New Gas");
  drupal_add_js($addGasBtn, 'inline', 'footer');

  $page_content .= drupal_get_form("sensormodule_editGasSearchResultsTable", $searchTerm);

  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_removeGasPage
//  USE: Sends user to the remove gas page, as well as inform them of what gas's will be affected upon deletion
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_removeGasPage() {

  // Get search term if it exists
  if(isset($_GET['gasID']) && !empty($_GET['gasID']))  {
    $gasID = $_GET['gasID'];
    $name = getGasName($gasID);
    $fullname = getGasFullname($gasID);
    $page_content = '<h1 class="sensormodule-remove-title">WARNING: Are you sure you want to remove this gas?</h1>
                     <h1 class="search-term">'.$fullname.' ('.$name.')</h1><br>';
    $page_content .= '<h1 class="sensormodule-remove-title">If this gas has related sensors in the database, you will lose data.</h1>';
    // Create table of potentially affected sensors
    $table = "<table><tr><th> Affected Sensors (Alias) </th></tr>";

    db_set_active('gas_sensor_db');
    $sensorIDQuery = db_query("SELECT SensorID FROM Detects WHERE GasID='%d';", $gasID);
    $count=0;
    while($sensorID=db_fetch_object($sensorIDQuery)) {
      $count = $count +1;
      $sensor =  $sensorID->SensorID;
      $affectedSensorsQuery = db_query("SELECT Alias FROM Sensor WHERE SensorID=%d", $sensor);
      $affectedSensor = db_fetch_object($affectedSensorsQuery);
      $table .= "<tr><td>" .$affectedSensor->Alias. "</td></tr>";
    }
    db_set_active('default');

    $table.="</table>";

    if($count==0) {
      drupal_set_message("No sensors affected", "error");
    }
    // Else show table of affected sensors
    else {
      $page_content .= $table;
    } 
    $page_content .= drupal_get_form('sensormodule_removeGasConfirmation', $gasID);
  }
  else {
    drupal_set_message("Bad request, no Gas ID given.", "error");
    drupal_goto("sensormodule/edit/gas");
  }

  return $page_content;
}
//                         END GAS PAGES
//==============================================================



//==============================================================
//                          BRAND PAGES
//==================
// [Search Brand]
//==================
//==================================================================
// NAME: sensormodule_searchBrandPage()
// PURPOSE: provide a page for the search option
// DATE: 8/9/2020
//==================================================================
function sensormodule_searchBrandPage()
{
  $searchTerm = "";
  $page_content = "";

  $page_content .= '<hr class="sensormodule-hr">';
  $page_content .= drupal_get_form('sensormodule_brandSearchBar');
  
  // Get search term if it exists
  if(isset($_GET['search']) && !empty($_GET['search']))  {
    $searchTerm = $_GET['search'];
    // Found Brands Heading
    $page_content .= '<div style="text-align: center;">
                      <h2><span class="search-tag">Search:</span><span class="search-term">\''.$searchTerm.'\'</span></div>';;
  }
  else {
    // All Brands Heading
    $page_content .= '<h2 class="search-term">Brands</h2>';
  } 
  $page_content .= '<hr class="sensormodule-hr">';
  $page_content .= drupal_get_form('sensormodule_brandSearchResultsTable',$searchTerm);

  return $page_content;
}

//==================
// [Edit Brand]
//==================
//***************************************************************
//  NAME: sensormodule_addBrandPage
//  USE: Sends user to the add Brand page
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_addBrandPage() {
  $page_content = drupal_get_form('sensormodule_addBrandForm');
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_modifyBrandPage
//  USE: Sends user to the modify brand page
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_modifyBrandPage(){

  // Get brand ID if it exists
  if(isset($_GET['brandID']) && !empty($_GET['brandID']))  {
    $brandID = $_GET['brandID'];
    $name = getBrandName($brandID);
    $page_content = '<h2 class="sensormodule-title">Edit '.$name.'</h2>';
    $page_content .= '<hr class="sensormodule-hr">';
    $page_content .= drupal_get_form('sensormodule_modifyBrandForm', $brandID);
  }
  else {
    drupal_set_message("Bad request, no Brand ID given.", "error");
    drupal_goto("sensormodule/edit/brand");
  }
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_editBrandPage
//  USE: Sends user to the edit brand page, containing add, edit and delete
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_editBrandPage() {

  $searchTerm = "";
  $page_content = "";
  $page_content .= '<hr class="sensormodule-hr">';

  // Get search term if it exists
  if(isset($_GET['search']) && !empty($_GET['search']))  {
    $searchTerm = $_GET['search'];
    // Found Brands Heading
    $page_content .= '<div style="text-align: center; padding: 20px 0px;">
                      <h2><span class="search-tag">Search:</span><span class="search-term">\''.$searchTerm.'\'</span></div>';
  }



  $page_content .= drupal_get_form("sensormodule_editBrandSearchBar");
  $page_content .= '<h2 class="sensormodule-title" style="text-align: center">Add Brand</h2>';
  $page_content .= "<div id='add-sensor-btns' style='text-align: center;'></div>";

  // Add brand btn
  $addBtn = makeGotoBtn(url("sensormodule/edit/brand/add"), 'add-sensor-btns', "New Brand");
  drupal_add_js($addBtn, 'inline', 'footer');

  
  
  $page_content .= '<hr class="sensormodule-hr">';
  $page_content .= drupal_get_form("sensormodule_editBrandSearchResultsTable", $searchTerm);
  return $page_content;
}

//***************************************************************
//  NAME: sensormodule_removeBrandPage
//  USE: Sends user to the remove brand page
//  DATE: 21/10/2020
//***************************************************************
function sensormodule_removeBrandPage() {
  
  // Get search term if it exists
  if(isset($_GET['brandID']) && !empty($_GET['brandID']))  {
    $brandID = $_GET['brandID'];
    $name = getBrandName($brandID);
    $page_content = '<h1 class="sensormodule-remove-title">WARNING: Are you sure you want to remove this brand?</h1>
                     <h1 class="search-term">'.$name.'</h1><br>';
    $page_content .= '<h1 class="sensormodule-remove-title">If this brand has related sensors in the database, you may lose data.</h1><br>';
    $page_content .= drupal_get_form('sensormodule_removeBrandConfirmation', $brandID);
  }
  else {
    drupal_set_message("Bad request, no BrandID given.", "error");
    drupal_goto("sensormodule/edit/brand");
  }

  return $page_content;
}
//                        END BRAND PAGES
//==============================================================

//==================================================================
//                           PAGE ELEMENTS
//==================================================================

// FUNCTION: makeBackBtn
// Creates the java script for a back button given its target locations
//  div ID
function makeBackBtn($targetDivID) {
  $btnJs = "var referrer = document.referrer; document.getElementById('$targetDivID').insertAdjacentHTML('beforeend', '<form action=\"' + referrer + '\" method=\"post\" ><button class=\"sensormodule-btn sensormodule-add-btn\">Back</button></form>');";
  return $btnJs;
}

// FUNCTION: makeGotoBtn
// Creates the java script for a got button with a given url and
//  div ID
function makeGotoBtn($url, $targetDivID, $text) {
  $btnJs = "document.getElementById('$targetDivID').insertAdjacentHTML('beforeend', '<form action=\"$url\" method=\"post\" ><button class=\"sensormodule-btn sensormodule-add-btn\">$text</button></form>');";
  return $btnJs;
}


//==================================================================
//                           VALIDATION
//==================================================================
// NAME: checkAlphanumeric
// PURPOSE: Check input for non alphanumeric values
// DATE: 10/9/2020
//==================================================================
function checkAlphanumeric($input) {
  // Set original flags
  $valid = true;
  $safeFlag = true;
  // Split array - use preg_split due to different character byte sizes
  $stringArray = preg_split('//u', $input, null, PREG_SPLIT_NO_EMPTY);

  // List of legal non alphanumeric characters for DB
  //  Ф = Ef in Cyrillic (Phi?)
  //  ± = Plus/Minus Symbol
  //  μ = Micro
  //  - = Dash (Negative)
  //  / = Forward Slash
  //  % = Percentage Sign
  // ' ' = Single Whitespace
  //  < = Less than sign
  $legalCharacters = array('Ф','±','μ','-','/','%', ' ', '<');

  //old regex -> '/[^a-zA-Z0-9\-\/]/'
  foreach ($stringArray as $char) {
    if(in_array($char, $legalCharacters)) {
      $safeFlag = true;
    }
    else if(preg_match('/[a-zA-Z0-9]/', $char)) {
      $safeFlag = true;
    }
    else {
      $safeFlag = false;
    }
    if($safeFlag == false) {
      $valid = false;
    }
  }
	return $valid;
}

//==================================================================
// NAME: checkDouble
// PURPOSE: checks whether the given string is a double or not
// DATE: 28/09/2020
//==================================================================
function checkDouble($input) {
  $valid = false;
  $regexDouble = "~^-?[0-9]+(\.[0-9]+)?$~xD";
  if(preg_match($regexDouble, $input))
  {
    $valid = true;
  }
  return $valid;
}

//==================================================================
// NAME: checkInt
// PURPOSE: checks whether the given string is a int or not
// DATE: 28/09/2020
//==================================================================
function checkInt($input) {
  $valid = false;
  $regexInt = "~^-?[0-9]+$~xD";
  if(preg_match($regexInt, $input)) {
    $valid = true;
  }
  return $valid;
}


//==================================================================
// NAME: checkDateString
// PURPOSE: checks whether the given string is in a valid date format
// DATE: 28/09/2020
//==================================================================
function checkDateString($input) {
  $valid = false;
  if(strlen($input) == 10) {
    $day = substr($input, 8, 2);
    $month = substr($input, 5, 2);
    $year = substr($input, 0, 4);
    if(checkdate($month, $day, $year)) {
      $valid = true;
    }
  }
  return $valid;
}

//==================================================================
// NAME: checkNull
// PURPOSE: checks whether the given string is null in the various ways
//           null can appear in the system
// DATE: 25/10/2020
//==================================================================
function checkNull($input) {
  $isNull = false;
  if( strcmp($input, "NULL") == 0 || strcmp($input, "null") == 0 || 
      strcmp(strtolower($input), "n.d.") == 0 || strcmp(strtolower($input), "n.d") == 0 || strcmp(strtolower($input), "nd") == 0 ||
      is_null($input) || strlen($input) == 0) {
    $isNull = true;
  }
  return $isNull;
}

//==================================================================
// NAME: sensorDetailValidation
// PURPOSE: Checks whether a sensor related form has valid input data
// DATE: 28/09/2020
// HOW TO: See sensormodule_addSensorForm_validate() for an example
//==================================================================
function sensorDetailValidation($form, $form_state) {

  // FormFieldName => array(Datatype, MaxLength)
  $constraints = array(
    'GasCount' => array('string', 8),
    'Alias' => array('string', 32),
    'PartNumber' => array('string', 32),
    'BrandID' => array('float', 7),
    'Technology' => array('string', 32),
    'ActivePart' => array('int', 1),
    'LastReview' => array('date', 10),
    'DatasheetReview' => array('float', 10),
    'Series' => array('string', 10),
    'Diameter' => array('float', 6),
    'Height' => array('float', 6),
    'PinCount' => array('integer', 1),
    'PinLength' => array('float', 6),
    'MaxWeight' => array('float', 5),
    'MinTemperature' => array('float', 5),
    'MaxTemperature' => array('float', 5),
    'MinPressure' => array('float', 10),
    'MaxPressure' => array('float', 10),
    'MinHumidity' => array('float', 3),
    'MaxHumidity' => array('float', 3),
    'Bias' => array('integer', 5),
    'MinLoad' => array('float', 5),
    'MaxLoad' => array('float', 5),
    'MaxSignalDrift' => array('string', 16),
    'SignalDriftInterval' => array('integer', 3),
    'ExpectedLife' => array('integer', 3),
    'Warranty' => array('integer', 3),
  );

  foreach ($constraints as $fieldName => $constraint) {
    // Set parameters
    $error = "";
    $errorFlag = false;
    $datatype = $constraint[0];
    $maxlength = $constraint[1];
    $value = $form_state[$fieldName];

    if(!checkNull($value)) {
      if(strlen($value) > $maxlength) {
        $error .= "$fieldName too long, must be less than or equal to $maxlength characters.<br/>";
        $errorFlag = true;
      }
      switch($datatype) {
        case 'float':
          if( !checkDouble($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;
  
        case 'integer':
          if( !checkInt($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;
  
        case 'string':
          if( !checkAlphanumeric($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;

        case 'date':
          if( !checkDateString($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype (YYYY-MM-DD).<br/>";
            $errorFlag = true;
          }
      }
      if($errorFlag) {
        form_error($form[$fieldName], $error);
      }
    }
  }
}

//==================================================================
// NAME: sensorDetectDetailValidation
// PURPOSE: Checks whether a sensor gas detect related form has valid input data
// DATE: 9/10/2020
//==================================================================
function sensorDetectDetailValidation($form, $form_state) {

  // FormFieldName => array(Datatype, MaxLength)
  $constraints = array(
    'MeasurementUnits' => array('string', 8),
    'MinReading' => array('float', 7),
    'MaxReading' => array('float', 7),
    'Resolution' => array('float', 7),
    'OvergasLimit' => array('integer', 7),
    'MinSensitivity' => array('float', 7),
    'MaxSensitivity' => array('float', 7),
    'SensitivityRatio' => array('string', 10),
    'SensitivityTestConcentration' => array('float', 5),
    'TTestType' => array('string', 4),
    'TTestResponse' => array('integer', 4),
    'ResponseStartLevel' => array('integer', 5),
    'ResponseEndLevel' => array('integer', 5),
    'ZeroCurrent' => array('string', 24)
  );

  foreach ($constraints as $fieldName => $constraint) {
    // Set parameters
    $error = "";
    $errorFlag = false;
    $datatype = $constraint[0];
    $maxlength = $constraint[1];
    $value = $form_state[$fieldName];

    if(!checkNull($value)) {
      if(strlen($value) > $maxlength) {
        $error .= "$fieldName too long, must be less than or equal to $maxlength characters.<br/>";
        $errorFlag = true;
      }
      switch($datatype) {
        case 'float':
          if( !checkDouble($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;
  
        case 'integer':
          if( !checkInt($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;
  
        case 'string':
          if( !checkAlphanumeric($value) ) {
            $error .= "$fieldName is the incorrect datatype, must be of type $datatype.<br/>";
            $errorFlag = true;
          }
        break;
      }
      if($errorFlag) {
        form_error($form[$fieldName], $error);
      }
    }
  }
}

//==================================================================
//                         MISC. FUNCTIONS
//==================================================================
//**************************************************************
//  NAME: getCurrentDate
//  USE: Returns a date string of the current day in Perth, Australia
//        in the form of YYYY-MM-DD
//  DATE: 21/10/2020
//**************************************************************
function getCurrentDate() {
  $timezone = "Australia/Perth";
  $tz_obj = new DateTimeZone($timezone);
  $today = new DateTime("now", $tz_obj);
  $todays_date = $today->format('Y-m-d');
  return $todays_date;
}

function formatFormDate($form_state) {
  $year = $form_state['year'];
  $month = $form_state['month'];
  if(strlen($month) == 1)
  {
    $month = "0$month";
  }
  $day = $form_state['day'];
  if(strlen($day) == 1)
  {
    $day = "0$day";
  }
  $date = "$year-$month-$day";
  return $date;
}

//**************************************************************
//  NAME: getBrandID
//  USE: Gets the BrandID from the database given it's name,
//        returns -1 if the name does not exist in the db
//  DATE: 21/10/2020
//**************************************************************
function getBrandID($name) {
  db_set_active("gas_sensor_db");
  $brandQuery = db_query("SELECT BrandID FROM Brand WHERE Name='%s';", $name);
  $result = db_fetch_array($brandQuery);
  
  // If null, name doesn't exist in the db
  if($result == NULL) {
    db_set_active("default");
    $brandID = -1;
  }
  else {
    $brandID = $result["BrandID"];
    db_set_active("default");
  }
  return $brandID;
}

//**************************************************************
//  NAME: getGasID
//  USE: Gets the GasID from the database given it's empirical name
//        returns -1 if the name does not exist in the db
//  DATE: 21/10/2020
//**************************************************************
function getGasID($empirical) {
  db_set_active("gas_sensor_db");
  $gasQuery = db_query("SELECT GasID FROM Gas WHERE Name='%s';", $empirical);
  $result = db_fetch_array($gasQuery);
  
  // If not 1, name doesn't exist in the db 
  if($result == NULL) {
    db_set_active("default");
    $gasID = -1;
  }
  else {
    $gasID = $result["GasID"];
    db_set_active("default");
  }
  return $gasID;
}

//**************************************************************
//  NAME: getGasFullnameID
//  USE: Gets the GasID from the database given it's fullname
//        returns -1 if the name does not exist in the db
//  DATE: 28/10/2020
//**************************************************************
function getGasFullnameID($fullname) {
  db_set_active("gas_sensor_db");
  $gasQuery = db_query("SELECT GasID FROM Gas WHERE Fullname='%s';", $fullname);
  $result = db_fetch_array($gasQuery);
  
  // If not 1, name doesn't exist in the db 
  if($result == NULL) {
    db_set_active("default");
    $gasID = -1;
  }
  else {
    $gasID = $result["GasID"];
    db_set_active("default");
  }
  return $gasID;
}

//**************************************************************
//  NAME: getBrandName
//  USE: Gets the Brand Name from the database given it's ID,
//        returns empty string if the name does not exist in the db
//  DATE: 23/10/2020
//**************************************************************
function getBrandName($brandID) {
  db_set_active("gas_sensor_db");
  $brandQuery = db_query("SELECT Name FROM Brand WHERE BrandID='%s';", $brandID);
  $result = db_fetch_array($brandQuery);

  // If false, name doesn't exist in the db
  if($result == NULL) {
    db_set_active("default");
    $name = "";
  }
  else {
    $name = $result["Name"];
    db_set_active("default");
  }
  return $name;
}

//**************************************************************
//  NAME: getGasName
//  USE: Gets the Gas Name from the database given it's ID,
//        returns empty string if the name does not exist in the db
//  DATE: 21/10/2020
//**************************************************************
function getGasName($gasID) {
  db_set_active("gas_sensor_db");
  $gasQuery = db_query("SELECT Name FROM Gas WHERE GasID='%s';", $gasID);
  $result = db_fetch_array($gasQuery);

  // If false, name doesn't exist in the db 
  if($result == NULL) {
    db_set_active("default");
    $name = "";
  }
  else {
    $name = $result["Name"];
    db_set_active("default");
  }
  return $name;
}

//**************************************************************
//  NAME: getGasFullname
//  USE: Gets the Gas Fullname from the database given it's ID,
//        returns empty string if the name does not exist in the db
//  DATE: 28/10/2020
//**************************************************************
function getGasFullname($gasID) {
  db_set_active("gas_sensor_db");
  $gasQuery = db_query("SELECT Fullname FROM Gas WHERE GasID='%s';", $gasID);
  $result = db_fetch_array($gasQuery);

  // If false, name doesn't exist in the db 
  if($result == NULL) {
    db_set_active("default");
    $name = "";
  }
  else {
    $name = $result["Fullname"];
    db_set_active("default");
  }
  return $name;
}

//**************************************************************
//  NAME: getSensorInfo
//  USE: Retrieves all the data for a given sensorID from the database
//        and returns a Sensor db object
//  DATE: 21/10/2020
//**************************************************************
function getSensorInfo($sensorID) {
  db_set_active('gas_sensor_db');
  $query = "SELECT Alias, PartNumber, Technology, ActivePart, LastReview, DatasheetReview, Series, Diameter,
            Height, PinCount, PinLength, MaxWeight, MinTemperature, MaxTemperature, MinPressure, MaxPressure,
            MinHumidity, MaxHumidity, Bias, MinLoad, MaxLoad, MaxSignalDrift, SignalDriftInterval, ExpectedLife,
            Warranty, GasCount, BrandID FROM Sensor WHERE SensorID='%s';";
  $queryResult = db_query($query, $sensorID);
  $sensorObj = db_fetch_object($queryResult);
  db_set_active("default");
  return $sensorObj;
}

//**************************************************************
//  NAME: getAllRelatedDetectsInfo
//  USE: Retrieves all the detection info in the database for a given
//        sensorDI and returns an array of related Detects db objects
//  DATE: 21/10/2020
//**************************************************************
function getAllRelatedDetectsInfo($sensorID) {
  db_set_active('gas_sensor_db');
  $query = "SELECT GasID, Name, Fullname, MeasurementUnits, MinReading, MaxReading, Resolution,
  OvergasLimit, MinSensitivity, MaxSensitivity, SensitivityRatio, SensitivityTestConcentration,
  TTestType, TTestResponse, ResponseStartLevel, ResponseEndLevel, ZeroCurrent FROM Detects NATURAL JOIN Gas WHERE SensorID='%s';";
  $queryResult = db_query($query, $sensorID);
  $detects = array();
  while($detectsObj = db_fetch_object($queryResult)) {
    $detects[] = $detectsObj;
  }
  db_set_active("default");

  return $detects;
}

//**************************************************************
//  NAME: getRelatedDetectsInfo
//  USE: Retrieves all the detection info in the database for a given
//        sensorID and GasID combo and returns a specific db object
//  DATE: 21/10/2020
//**************************************************************
function getRelatedDetectsInfo($sensorID, $gasID) {
  db_set_active('gas_sensor_db');
  $query = "SELECT Name, MeasurementUnits, MinReading, MaxReading, Resolution,
  OvergasLimit, MinSensitivity, MaxSensitivity, SensitivityRatio, SensitivityTestConcentration,
  TTestType, TTestResponse, ResponseStartLevel, ResponseEndLevel, ZeroCurrent FROM Detects NATURAL JOIN Gas WHERE SensorID='%s' AND GasID='%s';";
  $queryResult = db_query($query, $sensorID, $gasID);
  $detectObj = db_fetch_object($queryResult);
  
  db_set_active("default");

  return $detectObj;
}


//**************************************************************
//  NAME: updateDetectsField
//  USE: Checks if the values are null, and updates the Detects table accordingly
//  DATE: 25/10/2020
//  NOTE: Database needs to be set before call (eg to gas_sensor_db)
//**************************************************************
function updateDetectsField($fieldName, $fieldValue, $SensorID, $GasID) {

  if(checkNull($fieldValue))
  {
    db_query("UPDATE Detects SET $fieldName = NULL WHERE SensorID=%d AND GasID=%d;", intval($SensorID), intval($GasID));
  }
  else
  {
    db_query("UPDATE Detects SET $fieldName ='%s' WHERE SensorID=%d AND GasID=%d;", $fieldValue, intval($SensorID), intval($GasID));
  }
}

//**************************************************************
//  NAME: updateSensorField
//  USE: Checks if the values are null, and updates the Sensor table accordingly
//  DATE: 25/10/2020
//  NOTE: Database needs to be set before call (eg to gas_sensor_db)
//**************************************************************
function updateSensorField($fieldName, $fieldValue, $SensorID) {
  if(checkNull($fieldValue))
  {
    db_query("UPDATE Sensor SET $fieldName = NULL WHERE SensorID=%d;", intval($SensorID));
  }
  else
  {
    db_query("UPDATE Sensor SET $fieldName ='%s' WHERE SensorID=%d;", $fieldValue, intval($SensorID));
  }
}



